name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      
      - name: Set Up Virtual Environment
        run: |
          python -m venv env
          .\env\Scripts\Activate.ps1
          python -m pip install --upgrade pip setuptools wheel
          # Install necessary packages
          pip install scikit-learn==1.6.1
          pip install matplotlib==3.10.0
          pip install seaborn==0.13.2
          pip install Pillow==11.1.0
          pip install fastapi==0.115.7
          pip install Flask==3.1.0
          pip install streamlit==1.41.1
          pip install xgboost==2.1.4
          pip install altair==5.5.0
          pip install tqdm==4.67.1
          pip install tensorflow==2.16.1 keras==3.8.0
          pip install -r requirements.txt
          pip install pytest
        shell: pwsh
      
      - name: Verify All Dependencies
        run: |
          .\env\Scripts\Activate.ps1
          python -c "
          import sys
          
          def check_import(import_name, package_name):
              try:
                  module = __import__(import_name)
                  print(f'[PASS] {package_name}')
                  return True
              except ImportError as e:
                  print(f'[FAIL] {package_name} - Error: {str(e)}')
                  return False
              except Exception as e:
                  print(f'[ERROR] {package_name} - Unexpected error: {str(e)}')
                  return False
          
          # Tuple of (import_name, package_name)
          packages = [
              ('numpy', 'numpy'),
              ('pandas', 'pandas'),
              ('tensorflow', 'tensorflow'),
              ('keras', 'keras'),
              ('sklearn', 'scikit-learn'),
              ('matplotlib', 'matplotlib'),
              ('seaborn', 'seaborn'),
              ('PIL', 'pillow'),
              ('scipy', 'scipy'),
              ('fastapi', 'fastapi'),
              ('flask', 'Flask'),
              ('streamlit', 'streamlit'),
              ('pytest', 'pytest'),
              ('xgboost', 'xgboost'),
              ('altair', 'altair'),
              ('joblib', 'joblib'),
              ('tqdm', 'tqdm')
          ]
          
          print('Checking all dependencies...\n')
          failed = False
          for import_name, package_name in packages:
              if not check_import(import_name, package_name):
                  failed = True
          
          if failed:
              print('\nSome dependencies failed to import!')
              sys.exit(1)
          else:
              print('\nAll dependencies successfully imported!')
          "
        shell: pwsh
      
      - name: Run Tests
        run: |
          .\env\Scripts\Activate.ps1
          pytest tests/ || true
        shell: pwsh

  train_model:
    needs: test
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      
      - name: Set Up Virtual Environment
        run: |
          python -m venv env
          .\env\Scripts\Activate.ps1
          python -m pip install --upgrade pip setuptools wheel
          # Install necessary packages
          pip install scikit-learn==1.6.1
          pip install matplotlib==3.10.0
          pip install seaborn==0.13.2
          pip install Pillow==11.1.0
          pip install fastapi==0.115.7
          pip install Flask==3.1.0
          pip install streamlit==1.41.1
          pip install xgboost==2.1.4
          pip install altair==5.5.0
          pip install tqdm==4.67.1
          pip install tensorflow==2.16.1 keras==3.8.0
          pip install -r requirements.txt
        shell: pwsh
      
      - name: Train Model
        run: |
          .\env\Scripts\Activate.ps1
          if (Test-Path models/model_training.py) {
            python models/model_training.py
          } else {
            Write-Error "Error: models/model_training.py not found!"
            exit 1
          }
        shell: pwsh
