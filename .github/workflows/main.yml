name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      
      - name: Set Up Virtual Environment
        run: |
          python -m venv env
          .\env\Scripts\activate
          python -m pip install --upgrade pip setuptools wheel
          # Install key dependencies first
          pip install numpy==2.0.2
          pip install pandas==2.2.3
          pip install scikit-learn==1.6.1
          # Install remaining requirements
          pip install -r requirements.txt
          pip install pytest
        shell: pwsh
      
      - name: Verify All Dependencies
        run: |
          .\env\Scripts\activate
          python -c "
          import sys
          import pkg_resources
          
          def check_import(package):
              try:
                  module = __import__(package)
                  version = pkg_resources.get_distribution(package).version
                  print(f'✓ {package} (version {version})')
                  return True
              except ImportError as e:
                  print(f'✗ {package} - Error: {str(e)}')
                  return False
              except Exception as e:
                  print(f'? {package} - Unexpected error: {str(e)}')
                  return False
          
          packages = [
              'numpy',
              'pandas',
              'tensorflow',
              'keras',
              'scikit-learn',
              'matplotlib',
              'seaborn',
              'pillow',
              'scipy',
              'fastapi',
              'flask',
              'streamlit',
              'pytest',
              'xgboost',
              'altair',
              'joblib',
              'tqdm'
          ]
          
          print('Checking all dependencies...\n')
          failed = False
          for package in packages:
              if not check_import(package):
                  failed = True
          
          if failed:
              print('\nSome dependencies failed to import!')
              sys.exit(1)
          else:
              print('\nAll dependencies successfully imported!')
          "
        shell: pwsh
      
      - name: Run Tests
        run: |
          .\env\Scripts\activate
          pytest tests/ || true
        shell: pwsh

  train_model:
    needs: test
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      
      - name: Set Up Virtual Environment
        run: |
          python -m venv env
          .\env\Scripts\activate
          python -m pip install --upgrade pip setuptools wheel
          # Install key dependencies first
          pip install numpy==2.0.2
          pip install pandas==2.2.3
          pip install scikit-learn==1.6.1
          # Install remaining requirements
          pip install -r requirements.txt
        shell: pwsh
      
      - name: Train Model
        run: |
          .\env\Scripts\activate
          if (Test-Path models/model_training.py) {
            python models/model_training.py
          } else {
            Write-Error "Error: models/model_training.py not found!"
            exit 1
          }
        shell: pwsh